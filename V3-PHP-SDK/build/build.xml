<project name="V3PHPSDK" default="all" basedir="..">
	<property file="./build/php.properties"/>
	<property file="./build/build.properties"/>
	
	<target name="cleantest">
		<delete dir="${dir.testoutput}/apis"/>
		<delete dir="${dir.testoutput}/entities"/>
	</target>
	
	<target name="clean" depends="cleantest">
	    <delete dir="${phpdoc.output.html.dir}"/>
	</target>
        
        <!-- Clean temporary folder -->
        <target name="cleantmp">
            <echo msg="Cleaning temporary folder" />
            <available file="${dir.tmp}" property="dir.tmp.exists" />
            <if>
                <equals arg1="${dir.tmp.exists}" arg2="true"/>
                <then>
                  <echo msg="Cleaning temporary folder ${dir.tmp}" />
                  <delete dir="${dir.tmp}" includeemptydirs="true" verbose="true" failonerror="true" />  
                </then>
                <else>
                  <echo msg="Creating temporary folder ${dir.tmp}" />                  
                </else>
            </if>
            <mkdir dir="${dir.tmp}" />          
        </target>
	
	<target name="prepare" depends="clean">
	</target>
	
	<!-- Generate API Docs -->
	<target name="phpdoc">
		<mkdir dir="${phpdoc.output.html.dir}"/>
		<mkdir dir="${phpdoc.entities.output.html.dir}"/>
		<mkdir dir="${phpdoc.apis.output.html.dir}"/>
		<exec
			command="${phpdoc.exec} ${phpdoc.entities.args}"
			dir="${project.basedir}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpdoc.exec} ${phpdoc.apis.args}"
			dir="${project.basedir}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>
		
	<!-- Generate XSD=>POPO Classes -->
        <!-- Generates PHP classes in temporary folder and then copies it in target -->
        <target name="append-classes-from-xsd" depends="cleantmp">
 		<exec
			command="${xsd2php.exec} ${dir.tmp} ${schema.generate}"
			dir="${dir.build}"
			passthru="true"
                        checkreturn="true"
		/>   
                
            <copy todir="${dir.generatesrc}" haltonerror="false" overwrite="false">
                <fileset dir="${dir.tmp}">
                    <present present="srconly" targetdir="${dir.generatesrc}" />
                    <include name="**"></include>
                </fileset>
             </copy> 
                        
        </target>
         <!-- Removes everything from source folder -->
        <target name="xsd-source-cleanup">
            <available file="${dir.generatesrc}" property="dir.generatesrc.exists" />
            <if>
                <equals arg1="${dir.generatesrc.exists}" arg2="true"/>
                <then>
                  <echo msg="Cleaning source folder ${dir.generatesrc}" />
                  <delete dir="${dir.generatesrc}" includeemptydirs="true" verbose="true" failonerror="true" />  
                </then>
                <else>
                  <echo msg="Creating temporary folder ${dir.tmp}" />                  
                </else>
            </if>
            <mkdir dir="${dir.generatesrc}" />             
        </target>
        
        <!-- 
            This is a main target, which executes schema updates
            It wipes out all existing classes with new generated ones.
            New generated class won't be replaced by same file which was created by another schema in this target.
            
        -->
	<target name="xsd2php" depends="xsd-source-cleanup">	
                <phingcall target="append-classes-from-xsd">
                    <property name="schema.generate" value="${schema.finance}" />
                </phingcall>
                 <phingcall target="append-classes-from-xsd">
                    <property name="schema.generate" value="${schema.report}" />
                </phingcall>
                <phingcall target="append-classes-from-xsd">
                    <property name="schema.generate" value="${schema.restservice}" />
                </phingcall>
                <phingcall target="append-classes-from-xsd">
                    <property name="schema.generate" value="${schema.salestax}" />
                </phingcall>
                 <delete dir="${dir.tmp}" includeemptydirs="true" verbose="true" failonerror="true" />  
	</target>
	
	<!-- Isolated testing of just one suite:  POPO Unit Tests: QBD -->
	<target name="test-popo-qbd">
		<exec
			command="${phpunit.exec} ${phpunit.popo.qbd.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>

	<!-- Isolated testing of just one suite:  POPO Unit Tests: QBO -->
	<target name="test-popo-qbo">
		<exec
			command="${phpunit.exec} ${phpunit.popo.qbo.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>

    <target name="test-popo-report-it">
        <exec
                command="${phpunit.exec} ${phpunit.sdk.report-it.args}"
                dir="${dir.tests}"
                passthru="true"
                checkreturn="true"
                />
    </target>

    <target name="test-popo-report-ut">
        <exec
                command="${phpunit.exec} ${phpunit.sdk.report-ut.args}"
                dir="${dir.tests}"
                passthru="true"
                checkreturn="true"
                />
    </target>
        
        <target name="test-intg">
        		<exec
			command="${phpunit.exec} ${phpunit.sdk.integration.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>    
        </target>

	<!-- Isolated testing of just one suite:  Core tests -->
	<target name="test-core">
		<exec
			command="${phpunit.exec} ${phpunit.sdk.core.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>

	<!-- Isolated testing of just one suite:  DataServices tests -->
	<target name="test-dataservices">
		<exec
			command="${phpunit.exec} ${phpunit.sdk.dataservices.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>
			
	<!-- SDK Service, Platform Unit Tests -->
	<target name="test-sdk">
		<exec
			command="${phpunit.exec} ${phpunit.sdk.core.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.queryfilter.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.dataservices.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.platformservice.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.security.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.diagnostics.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
		<exec
			command="${phpunit.exec} ${phpunit.sdk.exception.args}"
			dir="${dir.tests}"
			passthru="true"
                        checkreturn="true"
		/>
	</target>
		
	<target name="gen-popo" depends="clean, cleantest, prepare, xsd2php, phpdoc"/>
	<target name="test" depends="test-sdk, test-popo-qbd, test-popo-qbo"/>
	<target name="all" depends="prepare, cleantest, xsd2php, phpdoc, test-sdk, test-popo-qbd, test-popo-qbo"/>
	
	<target name="test-popo-qbd" depends="test-popo-qbd"/>
	<target name="test-popo-qbo" depends="test-intg,test-popo-qbo"/>

	<!-- ===============================================  -->
	<!-- Target: dist - create zip file for distribution  -->
	<!-- ===============================================  -->
	<target name="dist">
		<echo msg="Creating archive..." />

		<zip prefix="v3-php-sdk-${version}/" destfile="v3-php-sdk-${version}.zip">
			<fileset dir="release">
				<include name="*.txt"/>
			</fileset>
			<fileset dir="sdk">
				<include name="Core/**" />
				<include name="Data/**" />
				<include name="DataService/**" />
                <include name="ReportService/**"/>
				<include name="Diagnostics/**" />
				<include name="Exception/**" />
				<include name="PlatformService/**" />
				<include name="WebhooksService/**" />
				<include name="QueryFilter/**" />
				<include name="Security/**" />
				<include name="Utility/**" />
				<include name="config.php" />
				<include name="sdk.config"/>
				<include name="_Samples/*"/>
			</fileset>
			<fileset dir="sdk">
				<include name="XSD2PHP/src/com/mikebevz/xsd2php/*.php" />
				<exclude name="**/SoapServer.php"/>
				<exclude name="**/Wsdl.php"/>
				<include name="XSD2PHP/src/com/mikebevz/xsd2php/*.xsl" />
				<include name="XSD2PHP/LICENSE" />
				<include name="XSD2PHP/README" />
			</fileset>
			<fileset dir=".">
				<include name="_PhpDocs/**"/>
				<exclude name="**/structure.xml"/>
			</fileset>
		</zip>

		<echo msg="Files copied and compressed in build directory OK!" />
	</target>
</project>
